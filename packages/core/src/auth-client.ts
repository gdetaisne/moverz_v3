/**
 * Gestion des cookies c√¥t√© client pour l'authentification
 */

const COOKIE_NAME = 'moverz_user_id';
const COOKIE_MAX_AGE = 30 * 24 * 60 * 60; // 30 jours en secondes

/**
 * D√©finit le cookie user_id
 */
export function setUserIdCookie(userId: string): void {
  if (typeof document === 'undefined') return;
  
  document.cookie = `${COOKIE_NAME}=${userId}; path=/; max-age=${COOKIE_MAX_AGE}; SameSite=Lax`;
  console.debug(`üç™ Cookie user_id d√©fini: ${userId}`);
}

/**
 * R√©cup√®re le cookie user_id
 */
export function getUserIdCookie(): string | null {
  if (typeof document === 'undefined') return null;
  
  const match = document.cookie.match(new RegExp(`(^| )${COOKIE_NAME}=([^;]+)`));
  return match ? match[2] : null;
}

/**
 * Supprime le cookie user_id
 */
export function clearUserIdCookie(): void {
  if (typeof document === 'undefined') return;
  
  // Supprimer l'ancien cookie user_id
  document.cookie = `user_id=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT`;
  // Supprimer le nouveau cookie moverz_user_id
  document.cookie = `${COOKIE_NAME}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT`;
  console.debug('üç™ Cookies user_id supprim√©s');
}

/**
 * Nettoie les anciens cookies et migre vers le nouveau syst√®me
 */
export function migrateCookies(): void {
  if (typeof document === 'undefined') return;
  
  // V√©rifier si l'ancien cookie existe
  const oldCookie = document.cookie.match(/(^| )user_id=([^;]+)/);
  if (oldCookie) {
    const oldUserId = oldCookie[2];
    console.debug(`üîÑ Migration cookie: user_id ‚Üí moverz_user_id (${oldUserId})`);
    
    // Supprimer l'ancien cookie
    document.cookie = `user_id=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT`;
    
    // Cr√©er le nouveau cookie avec la m√™me valeur
    document.cookie = `${COOKIE_NAME}=${oldUserId}; path=/; max-age=${COOKIE_MAX_AGE}; SameSite=Lax`;
  }
}

/**
 * G√©n√®re un nouvel ID utilisateur temporaire
 */
export function generateTemporaryUserId(): string {
  return `temp-${crypto.randomUUID()}`;
}

/**
 * V√©rifie si un user_id est temporaire
 */
export function isTemporaryUserId(userId: string): boolean {
  return userId.startsWith('temp-');
}

/**
 * Gestion compl√®te des sessions utilisateur
 */
export class UserSessionManager {
  private static instance: UserSessionManager;
  
  static getInstance(): UserSessionManager {
    if (!UserSessionManager.instance) {
      UserSessionManager.instance = new UserSessionManager();
    }
    return UserSessionManager.instance;
  }
  
  /**
   * R√©cup√®re l'ID utilisateur actuel (cookie ou g√©n√®re un nouveau)
   */
  getCurrentUserId(): string {
    // 0. Migrer les anciens cookies si n√©cessaire
    migrateCookies();
    
    // 1. Essayer de r√©cup√©rer depuis le cookie
    const cookieUserId = getUserIdCookie();
    if (cookieUserId) {
      return cookieUserId;
    }
    
    // 2. G√©n√©rer un nouvel ID temporaire
    const newUserId = generateTemporaryUserId();
    setUserIdCookie(newUserId);
    console.debug(`üÜï Nouvel utilisateur temporaire cr√©√©: ${newUserId}`);
    
    return newUserId;
  }
  
  /**
   * Convertit un utilisateur temporaire en permanent
   */
  async convertToPermanentUser(temporaryUserId: string, email: string): Promise<string> {
    if (!isTemporaryUserId(temporaryUserId)) {
      throw new Error('L\'utilisateur n\'est pas temporaire');
    }
    
    // TODO: Appeler l'API pour cr√©er un utilisateur permanent
    // Pour l'instant, on garde le m√™me ID mais on pourrait en g√©n√©rer un nouveau
    const permanentUserId = `user-${crypto.randomUUID()}`;
    
    // Mettre √† jour le cookie
    setUserIdCookie(permanentUserId);
    
    console.debug(`üîÑ Utilisateur converti: ${temporaryUserId} ‚Üí ${permanentUserId} (${email})`);
    
    return permanentUserId;
  }
  
  /**
   * Se connecter avec un utilisateur existant
   */
  loginWithEmail(email: string): void {
    // TODO: Appeler l'API pour r√©cup√©rer l'user_id par email
    // Pour l'instant, on g√©n√®re un ID bas√© sur l'email
    const userId = `user-${btoa(email).replace(/[^a-zA-Z0-9]/g, '').substring(0, 8)}`;
    setUserIdCookie(userId);
    console.debug(`üîë Connexion avec email: ${email} ‚Üí ${userId}`);
  }
  
  /**
   * Se d√©connecter
   */
  logout(): void {
    clearUserIdCookie();
    console.debug('üö™ D√©connexion');
  }
  
  /**
   * R√©cup√®re les informations de session
   */
  getSessionInfo(): {
    userId: string;
    isTemporary: boolean;
    email?: string;
  } {
    const userId = this.getCurrentUserId();
    const isTemporary = isTemporaryUserId(userId);
    
    return {
      userId,
      isTemporary,
      email: isTemporary ? undefined : 'user@example.com' // TODO: R√©cup√©rer depuis l'API
    };
  }
}

// Export de l'instance singleton
export const userSession = UserSessionManager.getInstance();
