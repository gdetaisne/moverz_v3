# ======================================
# Dockerfile pour les 2 frontends (desktop + mobile)
# ======================================

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat python3 make g++
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY scripts/ ./scripts/
COPY packages/ ./packages/
COPY apps/ ./apps/

RUN pnpm install --frozen-lockfile

# Stage 2: Build Desktop (Next.js avec API)
FROM node:20-alpine AS builder-desktop
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps ./apps
COPY --from=deps /app/packages ./packages
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build desktop app (Next.js standalone)
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production
RUN cd apps/web && pnpm build

# Stage 3: Build Mobile (Next.js export static)
FROM node:20-alpine AS builder-mobile
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/web-mobile ./apps/web-mobile

# Build mobile app (static export)
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production
RUN cd apps/web-mobile && pnpm build

# Stage 4: Nginx + Node.js runner
FROM node:20-alpine AS runner
WORKDIR /app

# Install nginx
RUN apk add --no-cache nginx

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy Desktop app (Next.js standalone)
COPY --from=builder-desktop /app/apps/web/public ./public
COPY --from=builder-desktop --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=builder-desktop --chown=nextjs:nodejs /app/apps/web/.next/static ./.next/static
COPY --from=builder-desktop /app/google-credentials.json ./google-credentials.json
COPY --from=builder-desktop /app/prisma ./prisma
COPY --from=builder-desktop /app/scripts ./scripts

# Copy Mobile app (static files)
COPY --from=builder-mobile /app/apps/web-mobile/out ./static-mobile

# Create uploads directory
RUN mkdir -p /app/uploads && chown -R nextjs:nodejs /app/uploads

# Copy nginx config
COPY nginx.conf /etc/nginx/http.d/default.conf

# Create startup script
RUN cat > /app/start.sh << 'EOF'
#!/bin/sh

# Init DB and Google credentials
npx prisma db push --accept-data-loss --skip-generate || true
node scripts/init-google-credentials.js || true

# Start Next.js backend in background
su nextjs -s /bin/sh -c "node server.js" &

# Start nginx in foreground
nginx -g "daemon off;"
EOF

RUN chmod +x /app/start.sh

EXPOSE 80

CMD ["/app/start.sh"]

