"use client";
import React, { useState, useMemo, useEffect } from "react";
import BackOffice from "@/components/BackOffice";
import WorkflowSteps from "@/components/WorkflowSteps";
import QuoteForm from "@/components/QuoteForm";
import { getBuildInfo } from "@/lib/buildInfo";
import { TInventoryItem } from "@/lib/schemas";
import { clearCache } from "@/lib/cache";

interface RoomData {
  id: string;
  name: string;
  photos: {
    file: File;
    fileUrl?: string; // URL du fichier upload√©
    analysis?: any;
    status: 'uploaded' | 'processing' | 'completed' | 'error';
    error?: string;
    selectedItems: Set<number>; // Indices des objets s√©lectionn√©s (toujours d√©fini)
    photoId?: string; // ID unique pour le traitement asynchrone
    progress?: number; // Pourcentage de progression (0-100)
    roomName?: string; // Nom de la pi√®ce pour cette photo sp√©cifique
  }[];
}


export default function Home() {
  const [currentRoom, setCurrentRoom] = useState<RoomData>({
    id: 'room-1',
    name: 'D√©tection automatique...',
    photos: []
  });
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState<'tests' | 'backoffice'>('tests');
  const [isEmbedded, setIsEmbedded] = useState(false);
  const [currentTime, setCurrentTime] = useState<Date | null>(null);
  const [currentStep, setCurrentStep] = useState(1);
  const [quoteFormData, setQuoteFormData] = useState<any>(null);
  const [inventoryValidated, setInventoryValidated] = useState(false);
  const [isSubmittingQuote, setIsSubmittingQuote] = useState(false);
  const [isDragOver, setIsDragOver] = useState(false);
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  // Configuration des √©tapes du workflow
  const isStep1Completed = currentRoom.photos.length > 0;
  const isStep2Completed = quoteFormData !== null;
  const isStep3Completed = currentRoom.photos.some(p => p.analysis?.items && p.analysis.items.length > 0);
  const isStep4Completed = false; // Toujours false car c'est la derni√®re √©tape
  
  const workflowSteps = [
    {
      id: 1,
      title: "Charger des photos",
      description: "Uploadez vos photos de pi√®ces",
      icon: "üì∏",
      completed: isStep1Completed,
      disabled: false
    },
    {
      id: 2,
      title: "Valider l'inventaire",
      description: "V√©rifiez les objets dans la pi√®ce",
      icon: "üîç",
      completed: isStep3Completed,
      disabled: !isStep1Completed
    },
    {
      id: 3,
      title: "Pr√©parer la demande",
      description: "Renseignez vos informations",
      icon: "üìã",
      completed: isStep2Completed,
      disabled: !isStep1Completed
    },
    {
      id: 4,
      title: "Envoyer le devis",
      description: "Finalisez votre demande",
      icon: "üì§",
      completed: isStep4Completed,
      disabled: !isStep2Completed
    }
  ];

  // Fonction pour changer d'√©tape
  const handleStepChange = (step: number) => {
    setCurrentStep(step);
  };

  // Fonctions pour g√©rer le formulaire
  const handleQuoteFormNext = (formData: any) => {
    console.log('üéØ [PARENT] handleQuoteFormNext appel√©e avec:', formData);
    setQuoteFormData(formData);
    // Passer √† l'√©tape suivante (√©tape 4 - Envoyer le devis)
    console.log('üìà [PARENT] Passage √† l\'√©tape 4');
    setCurrentStep(4);
    console.log('‚úÖ [PARENT] currentStep mis √† jour');
  };

  const handleQuoteFormPrevious = () => {
    // Retourner √† l'√©tape pr√©c√©dente (√©tape 2 - Valider l'inventaire)
    setCurrentStep(2);
  };

  // Fonction pour envoyer la demande de devis
  const handleSubmitQuote = async () => {
    if (!quoteFormData) {
      alert('Veuillez d\'abord remplir le formulaire de demande.');
      return;
    }

    setIsSubmittingQuote(true);
    
    try {
      // Simuler l'envoi (remplacer par un vrai appel API)
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Succ√®s
      alert('‚úÖ Demande de devis envoy√©e avec succ√®s !\n\nNous vous contacterons dans les plus brefs d√©lais pour finaliser votre devis personnalis√©.');
      
      // Optionnel : r√©initialiser l'application ou rediriger
      // setCurrentStep(1);
      // setCurrentRoom({ id: 'room-1', name: 'Pi√®ce 1', photos: [] });
      // setQuoteFormData(null);
      
    } catch (error) {
      alert('‚ùå Erreur lors de l\'envoi de votre demande. Veuillez r√©essayer.');
      console.error('Erreur envoi devis:', error);
    } finally {
      setIsSubmittingQuote(false);
    }
  };

  // Persistance automatique des donn√©es
  useEffect(() => {
    const saveData = () => {
      const dataToSave = {
        currentRoom,
        currentStep,
        quoteFormData,
        inventoryValidated,
        timestamp: Date.now()
      };
      localStorage.setItem('moverz_inventory_data', JSON.stringify(dataToSave));
    };

    // Sauvegarder toutes les 5 secondes
    const interval = setInterval(saveData, 5000);
    
    // Sauvegarder imm√©diatement
    saveData();

    return () => clearInterval(interval);
  }, [currentRoom, currentStep, quoteFormData, inventoryValidated]);

  // Charger les donn√©es sauvegard√©es au d√©marrage
  useEffect(() => {
    const savedData = localStorage.getItem('moverz_inventory_data');
    if (savedData) {
      try {
        const data = JSON.parse(savedData);
        // V√©rifier que les donn√©es ne sont pas trop anciennes (24h)
        if (data.timestamp && (Date.now() - data.timestamp) < 24 * 60 * 60 * 1000) {
          if (data.currentRoom) setCurrentRoom(data.currentRoom);
          if (data.currentStep) setCurrentStep(data.currentStep);
          if (data.quoteFormData) setQuoteFormData(data.quoteFormData);
          if (data.inventoryValidated) setInventoryValidated(data.inventoryValidated);
        }
      } catch (error) {
        console.error('Erreur lors du chargement des donn√©es sauvegard√©es:', error);
      }
    }
  }, []);


  // Pas d'auto-avancement - l'utilisateur contr√¥le les √©tapes manuellement

  // D√©tecter si l'app est dans un iframe
  useEffect(() => {
    const checkIfEmbedded = () => {
      try {
        return window.self !== window.top;
      } catch (e) {
        return true;
      }
    };
    
    setIsEmbedded(checkIfEmbedded());
  }, []);

  // Mettre √† jour l'heure toutes les secondes (c√¥t√© client uniquement)
  useEffect(() => {
    // Initialiser l'heure c√¥t√© client
    setCurrentTime(new Date());
    
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // Fonction utilitaire pour arrondir les m¬≥ √† 2 chiffres avec arrondi sup√©rieur
  const roundUpVolume = (volume: number): number => {
    return Math.ceil(volume * 100) / 100;
  };

  // Fonction pour g√©n√©rer un ID unique
  const generatePhotoId = () => {
    return `photo_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  };

  // Fonction pour changer le nom de la pi√®ce
  const handleRoomNameChange = (newName: string) => {
    setCurrentRoom(prev => ({
      ...prev,
      name: newName || 'Pi√®ce sans nom'
    }));
    setIsEditingRoomName(false);
  };

  // Fonction de traitement asynchrone d'une photo
  const processPhotoAsync = async (photoIndex: number, file: File, photoId: string) => {
    try {
      // V√©rifier si la photo est d√©j√† en cours de traitement
      setCurrentRoom(prev => {
        const photo = prev.photos[photoIndex];
        if (!photo || photo.status === 'processing' || photo.status === 'completed') {
          console.log(`Photo ${photoIndex} d√©j√† trait√©e ou en cours, ignor√©e`);
          return prev;
        }
        
        // Marquer comme en cours de traitement
        return {
          ...prev,
          photos: prev.photos.map((photo, idx) => 
            idx === photoIndex ? { 
              ...photo, 
              status: 'processing',
              progress: 10
            } : photo
          )
        };
      });

      // Simuler progression
      const progressInterval = setInterval(() => {
        setCurrentRoom(prev => ({
          ...prev,
          photos: prev.photos.map((photo, idx) => 
            idx === photoIndex ? { 
              ...photo, 
              progress: Math.min((photo.progress || 10) + Math.random() * 15, 90)
            } : photo
          )
        }));
      }, 1000);

      const fd = new FormData();
      fd.append("file", file);
      const res = await fetch("/api/photos/analyze", { method: "POST", body: fd });
      const result = await res.json();
      
      clearInterval(progressInterval);

      if (res.ok) {
        // Mettre √† jour le nom de la pi√®ce pour cette photo sp√©cifique
        if (result.roomDetection?.roomType) {
          setCurrentRoom(prev => ({
            ...prev,
            photos: prev.photos.map((photo, idx) => 
              idx === photoIndex ? { 
                ...photo, 
                roomName: result.roomDetection.roomType
              } : photo
            )
          }));
          console.log(`Photo ${photoIndex}: pi√®ce d√©tect√©e = ${result.roomDetection.roomType}`);
        }

        // Marquer comme termin√© avec le r√©sultat et l'URL Base64
        setCurrentRoom(prev => ({
          ...prev,
          photos: prev.photos.map((photo, idx) => 
            idx === photoIndex ? { 
              ...photo, 
              status: 'completed', 
              analysis: result,
              fileUrl: result.file_url,
              progress: 100
            } : photo
          )
        }));
      } else {
        throw new Error(result.error || 'Erreur inconnue');
      }
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Erreur inconnue';
      setCurrentRoom(prev => ({
        ...prev,
        photos: prev.photos.map((photo, idx) => 
          idx === photoIndex ? { 
            ...photo, 
            status: 'error', 
            error: errorMsg,
            progress: 0
          } : photo
        )
      }));
    }
  };

  // Fonctions pour le drag & drop
  const onDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFiles(files);
    }
  };

  const onDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const onDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const onFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files ?? []);
    if (files.length > 0) {
      handleFiles(files);
    }
  };

  const handleFiles = (files: File[]) => {
    // V√©rifier la limite de 100 photos
    if (currentRoom.photos.length + files.length > 100) {
      alert(`Limite de 100 photos atteinte. Vous ne pouvez ajouter que ${100 - currentRoom.photos.length} photo(s) suppl√©mentaire(s).`);
      return;
    }
    
    setLoading(true);
    
    // Initialiser les photos avec statut 'uploaded' imm√©diatement
    const newPhotos = files.map(file => {
      const photoId = generatePhotoId();
      return {
        file,
        fileUrl: URL.createObjectURL(file), // Cr√©er l'URL imm√©diatement
        status: 'uploaded' as const,
        selectedItems: new Set<number>(),
        photoId,
        progress: 0
      };
    });
    
    setCurrentRoom(prev => ({
      ...prev,
      photos: [...prev.photos, ...newPhotos]
    }));
    
    // Traiter chaque photo en arri√®re-plan
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const photoIndex = currentRoom.photos.length + i;
      const photoId = newPhotos[i].photoId!;
      
      // Lancer le traitement asynchrone (ne pas attendre)
      // Utiliser setTimeout pour s'assurer que le state est mis √† jour avant
      setTimeout(() => {
        processPhotoAsync(photoIndex, file, photoId);
      }, 100);
    }
    
    setLoading(false);
  };

  async function onUpload(e: React.ChangeEvent<HTMLInputElement>) {
    const files = Array.from(e.target.files ?? []);
    
    // V√©rifier la limite de 100 photos
    if (currentRoom.photos.length + files.length > 100) {
      alert(`Limite de 100 photos atteinte. Vous ne pouvez ajouter que ${100 - currentRoom.photos.length} photo(s) suppl√©mentaire(s).`);
      return;
    }
    
    setLoading(true);
    
    // Initialiser les photos avec statut 'uploaded' imm√©diatement
    const newPhotos = files.map(file => {
      const photoId = generatePhotoId();
      return {
        file,
        fileUrl: URL.createObjectURL(file), // Cr√©er l'URL imm√©diatement
        status: 'uploaded' as const,
        selectedItems: new Set<number>(),
        photoId,
        progress: 0
      };
    });
    
    setCurrentRoom(prev => ({
      ...prev,
      photos: [...prev.photos, ...newPhotos]
    }));
    
    // Ne pas basculer automatiquement - l'utilisateur peut rester sur l'onglet upload
    
    // Traiter chaque photo en arri√®re-plan
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const photoId = newPhotos[i].photoId!;
      
      // Lancer le traitement asynchrone avec l'index correct
      setTimeout(() => {
        // Trouver l'index de la photo dans le state mis √† jour
        setCurrentRoom(prev => {
          const photoIndex = prev.photos.findIndex(photo => photo.photoId === photoId);
          if (photoIndex !== -1) {
            processPhotoAsync(photoIndex, file, photoId);
          }
          return prev;
        });
      }, 100);
    }
    
    setLoading(false);
  }


  const totalVolumeSelected = useMemo(() => {
    let totalVolume = 0;
    let totalItems = 0;

    currentRoom.photos.forEach(photo => {
      if (photo.status === 'completed' && photo.analysis?.items) {
        // Objets normaux
        photo.analysis.items.forEach((item: TInventoryItem, itemIndex: number) => {
          // V√©rifier si l'objet est s√©lectionn√©
          // Par d√©faut, si le Set est vide, tous les objets sont s√©lectionn√©s
          const isSelected = photo.selectedItems.size === 0 || photo.selectedItems.has(itemIndex);
          if (isSelected) {
            totalVolume += (item.volume_m3 || 0) * (item.quantity || 1);
            totalItems += item.quantity || 1;
          }
        });
        
        // Autres objets (toujours s√©lectionn√©s par d√©faut)
        if (photo.analysis.special_rules?.autres_objets?.present) {
          totalVolume += photo.analysis.special_rules.autres_objets.volume_m3 || 0;
          totalItems += photo.analysis.special_rules.autres_objets.listed_items?.length || 0;
        }
      }
    });

    return { totalVolume: roundUpVolume(totalVolume), totalItems };
  }, [currentRoom.photos]);

  const toggleItemSelection = (photoIndex: number, itemIndex: number) => {
    setCurrentRoom(prev => ({
      ...prev,
      photos: prev.photos.map((photo, idx) => {
        if (idx === photoIndex) {
          const selectedItems = new Set(photo.selectedItems);
          if (selectedItems.has(itemIndex)) {
            selectedItems.delete(itemIndex);
          } else {
            selectedItems.add(itemIndex);
          }
          return { ...photo, selectedItems };
        }
        return photo;
      })
    }));
  };

  const selectAllItems = (photoIndex: number) => {
    setCurrentRoom(prev => ({
      ...prev,
      photos: prev.photos.map((photo, idx) => {
        if (idx === photoIndex && photo.analysis?.items) {
          const selectedItems = new Set(Array.from({ length: photo.analysis.items.length }, (_, i) => i));
          return { ...photo, selectedItems };
        }
        return photo;
      })
    }));
  };

  const deselectAllItems = (photoIndex: number) => {
    setCurrentRoom(prev => ({
      ...prev,
      photos: prev.photos.map((photo, idx) => {
        if (idx === photoIndex) {
          return { ...photo, selectedItems: new Set() };
        }
        return photo;
      })
    }));
  };

  const clearAnalysisCache = () => {
    clearCache();
    alert('Cache vid√© ! Les prochaines analyses seront refaites.');
  };

  // Fonction pour supprimer une photo
  const deletePhoto = (photoIndex: number) => {
    if (confirm('√ätes-vous s√ªr de vouloir supprimer cette photo ?')) {
      setCurrentRoom(prev => ({
        ...prev,
        photos: prev.photos.filter((_, index) => index !== photoIndex)
      }));
    }
  };

  // Fonction pour r√©essayer l'analyse d'une photo
  const retryPhotoAnalysis = (photoIndex: number) => {
    const photo = currentRoom.photos[photoIndex];
    if (photo && photo.photoId) {
      processPhotoAsync(photoIndex, photo.file, photo.photoId);
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'uploaded': return 'üì§';
      case 'processing': return 'üîÑ';
      case 'completed': return '‚úÖ';
      case 'error': return '‚ùå';
      default: return '‚ùì';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'uploaded': return 'text-blue-500';
      case 'processing': return 'text-blue-600';
      case 'completed': return 'text-green-600';
      case 'error': return 'text-red-600';
      default: return 'text-gray-400';
    }
  };

  const translateCategory = (category: string) => {
    switch (category) {
      case 'furniture': return 'Meuble';
      case 'appliance': return '√âlectrom√©nager';
      case 'box': return 'Carton';
      case 'art': return 'Art';
      case 'misc': return 'Divers';
      default: return category;
    }
  };

  // Fonction utilitaire pour v√©rifier si un objet est s√©lectionn√©
  const isItemSelected = (photo: RoomData['photos'][0], itemIndex: number): boolean => {
    return photo.selectedItems.size === 0 || photo.selectedItems.has(itemIndex);
  };

  // Fonction utilitaire pour g√©n√©rer les notes enrichies
  const getEnrichedNotes = (item: TInventoryItem): string => {
    let notes = item.notes || '';
    if (item.fragile && !notes.toLowerCase().includes('fragile')) {
      notes = notes ? `${notes} | Fragile !` : 'Fragile !';
    }
    return notes;
  };

  const enrichDescription = (item: TInventoryItem) => {
    let description = item.label;
    
    // Ajouter des d√©tails selon la cat√©gorie
    if (item.category === 'furniture') {
      if (item.label.toLowerCase().includes('fauteuil')) {
        description += ' (si√®ge rembourr√©)';
      } else if (item.label.toLowerCase().includes('table')) {
        description += ' (surface plane)';
      } else if (item.label.toLowerCase().includes('lit')) {
        description += ' (meuble de couchage)';
      }
    } else if (item.category === 'appliance') {
      description += ' (appareil √©lectrique)';
    } else if (item.category === 'art') {
      description += ' (≈ìuvre d\'art)';
    }
    
    return description;
  };

  const renderTestsInterface = () => (
    <>

        {/* √âtape 2 - Valider l'inventaire */}
        {currentStep === 2 && (
          <div className="max-w-4xl mx-auto">
            <div className="bg-white p-8 rounded-lg border border-gray-200">
              <h3 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                <span className="text-3xl mr-3">üîç</span>
                Valider l'inventaire
              </h3>
              <p className="text-gray-600 mb-6">
                V√©rifiez et validez les objets dans {currentRoom.name} d√©tect√©s par l'IA dans vos photos.
              </p>
              
              <div className="space-y-6">
                {/* Zone de drop - CTA Ajouter une photo */}
                <div
                  onDrop={onDrop}
                  onDragOver={onDragOver}
                  onDragLeave={onDragLeave}
                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                    isDragOver
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                >
                  <div className="text-gray-500">
                    <div className="text-4xl mb-4">üì∏</div>
                    <p className="text-lg mb-2">Glissez-d√©posez vos photos ici</p>
                    <p className="text-sm">ou cliquez pour s√©lectionner</p>
                    <input
                      type="file"
                      ref={fileInputRef}
                      onChange={onFileSelect}
                      multiple
                      accept="image/*"
                      className="hidden"
                    />
                    <button
                      onClick={() => fileInputRef.current?.click()}
                      className="mt-4 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      Ajouter une photo
                    </button>
                  </div>
                </div>

                {/* Photos charg√©es */}
                {currentRoom.photos.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold text-gray-900 mb-4">
                      Photos charg√©es ({currentRoom.photos.length}/100)
                    </h4>
                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                      {currentRoom.photos.map((photo, photoIndex) => (
                        <div key={photoIndex} className="relative group">
                          <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                            <img
                              src={photo.fileUrl || URL.createObjectURL(photo.file)}
                              alt={`Photo ${photoIndex + 1}`}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          
                          {/* Bouton de suppression - toujours visible */}
                          <button
                            onClick={() => deletePhoto(photoIndex)}
                            className="absolute top-2 right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors z-10"
                            title="Supprimer cette photo"
                          >
                            √ó
                          </button>
                          
                          {/* Statut en bas √† gauche - toujours visible */}
                          <div className="absolute bottom-2 left-2 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs">
                            {photo.status === 'uploaded' && 'En attente'}
                            {photo.status === 'processing' && 'Analyse...'}
                            {photo.status === 'completed' && 'Termin√©'}
                            {photo.status === 'error' && 'Erreur'}
                          </div>
                          
                          {/* Barre de progression - toujours visible si en cours */}
                          {photo.status === 'processing' && (
                            <div className="absolute bottom-0 left-0 right-0 bg-gray-300 h-1 rounded-b-lg">
                              <div 
                                className="bg-blue-500 h-1 rounded-b-lg transition-all duration-500" 
                                style={{ width: `${photo.progress || 0}%` }}
                              ></div>
                            </div>
                          )}
                          
                          {/* Message d'erreur */}
                          {photo.status === 'error' && (
                            <div className="absolute bottom-0 left-0 right-0 bg-red-500 text-white text-xs p-2 rounded-b-lg">
                              {photo.error}
                              <button
                                onClick={() => retryPhotoAnalysis(photoIndex)}
                                className="ml-2 underline hover:no-underline"
                              >
                                R√©essayer
                              </button>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* √âtape 3 - Pr√©parer la demande */}
        {currentStep === 3 && (
          <QuoteForm 
            onNext={handleQuoteFormNext}
            onPrevious={handleQuoteFormPrevious}
            initialData={quoteFormData}
          />
        )}


      {currentRoom.photos.some(p => p.status === 'processing') && (
        <div className="mb-6 p-6 bg-blue-50 rounded-lg border border-blue-200">
          <div className="flex items-center space-x-3">
            <div className="animate-spin text-blue-600 text-xl">üîÑ</div>
            <div>
              <h4 className="text-lg font-semibold text-blue-800">Traitement en cours...</h4>
              <p className="text-base text-blue-600">
                {currentRoom.photos.filter(p => p.status === 'completed').length}/{currentRoom.photos.length} photo(s) analys√©e(s)
              </p>
              <p className="text-sm text-blue-500 mt-1">
                {currentRoom.photos.filter(p => p.status === 'processing').length} photo(s) en cours d'analyse
              </p>
            </div>
          </div>
        </div>
      )}


        <div className="space-y-6">
          {/* Bouton pour aller √† l'inventaire si on a des photos */}
          {currentRoom.photos.length > 0 && (
            <div className="flex justify-end">
              <button
                onClick={() => setActivePhotoTab('inventory')}
                className="flex items-center space-x-2 px-4 py-2 bg-[var(--mz-teal)] text-white rounded-lg hover:bg-[var(--mz-teal)]/90 transition-colors"
              >
                <span>Voir l'inventaire</span>
                <span>‚Üí</span>
              </button>
            </div>
          )}

          {/* Zone d'upload */}
          <div className="bg-white rounded-lg border-2 border-dashed border-gray-300 p-8 text-center hover:border-[var(--mz-teal)] transition-colors">
            <div className="space-y-4">
              <div className="text-6xl">üì∏</div>
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">Charger des photos</h3>
                <p className="text-gray-600 mb-4">
                  S√©lectionnez jusqu'√† {100 - currentRoom.photos.length} photo(s) de vos pi√®ces
                </p>
                <p className="text-sm text-gray-500">
                  Formats accept√©s : JPG, PNG, WebP ‚Ä¢ Taille max : 10MB par photo
                </p>
              </div>
              <div className="flex justify-center">
                <input 
                  type="file" 
                  multiple 
                  accept="image/*" 
                  onChange={onUpload}
                  disabled={loading || currentRoom.photos.length >= 100}
                  className="block text-sm text-gray-500 file:mr-4 file:py-3 file:px-6 file:rounded-xl file:border-0 file:text-sm file:font-semibold file:bg-[var(--mz-teal)] file:text-white hover:file:opacity-90 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                />
              </div>
              {currentRoom.photos.length > 0 && (
                <p className="text-sm text-blue-600">
                  {currentRoom.photos.length}/100 photos charg√©es
                </p>
              )}
            </div>
          </div>

          {/* Liste des photos upload√©es */}
          {currentRoom.photos.length > 0 && (
            <div className="bg-white rounded-lg border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Photos charg√©es</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {currentRoom.photos.map((photo, photoIndex) => (
                  <div key={photoIndex} className="relative group">
                    <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                      <img 
                        src={URL.createObjectURL(photo.file)} 
                        alt={`Photo ${photoIndex + 1}`}
                        className="w-full h-full object-cover"
                      />
                    </div>
                    
                    {/* Bouton de suppression - toujours visible */}
                    <button
                      onClick={() => deletePhoto(photoIndex)}
                      className="absolute top-2 right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors z-10"
                      title="Supprimer cette photo"
                    >
                      √ó
                    </button>
                    
                    {/* Statut en bas √† gauche - toujours visible */}
                    <div className="absolute bottom-2 left-2 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs">
                      {photo.status === 'uploaded' && 'En attente'}
                      {photo.status === 'processing' && 'Analyse...'}
                      {photo.status === 'completed' && 'Termin√©'}
                      {photo.status === 'error' && 'Erreur'}
                    </div>
                    
                    {/* Barre de progression - toujours visible si en cours */}
                    {photo.status === 'processing' && (
                      <div className="absolute bottom-0 left-0 right-0 bg-gray-300 h-1 rounded-b-lg">
                        <div 
                          className="bg-blue-500 h-1 rounded-b-lg transition-all duration-500" 
                          style={{ width: `${photo.progress || 0}%` }}
                        ></div>
                      </div>
                    )}
                    
                    {/* Message d'erreur */}
                    {photo.status === 'error' && (
                      <div className="absolute bottom-0 left-0 right-0 bg-red-500 text-white text-xs p-2 rounded-b-lg">
                        {photo.error}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {activePhotoTab === 'inventory' && (currentStep === 1 || currentStep === 2) && (
        <div className="space-y-8">
          {/* Bouton de retour */}
          <div className="flex justify-between items-center">
            <button
              onClick={() => setActivePhotoTab('upload')}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
            >
              <span>‚Üê</span>
              <span>Retour aux photos</span>
            </button>
            <div className="flex items-center space-x-4">
              <div className="text-sm text-gray-600">
                {currentRoom.photos.length} photo{currentRoom.photos.length > 1 ? 's' : ''} charg√©e{currentRoom.photos.length > 1 ? 's' : ''}
              </div>
              {currentStep === 1 && currentRoom.photos.some(p => p.status === 'completed') && (
                <button
                  onClick={() => setCurrentStep(2)}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <span>Valider l'inventaire</span>
                  <span>‚Üí</span>
                </button>
              )}
            </div>
          </div>

          {currentRoom.photos.length === 0 ? (
            <div className="bg-gray-50 rounded-lg border p-8 text-center">
              <div className="text-4xl mb-4">üì∏</div>
              <h3 className="text-lg font-semibold text-gray-700 mb-2">Aucune photo charg√©e</h3>
              <p className="text-gray-600">Chargez des photos pour commencer l'analyse</p>
            </div>
          ) : (
            currentRoom.photos.map((photo, photoIndex) => (
              <div key={photoIndex} className="border rounded-xl p-6 bg-white shadow-sm">
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  
                  {/* C√¥t√© gauche - Image */}
                  <div className="lg:col-span-1 space-y-4">
                    <div className="aspect-square bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden">
                      {photo.status === 'completed' ? (
                        <img 
                          src={photo.fileUrl || URL.createObjectURL(photo.file)} 
                          alt={`Photo ${photoIndex + 1}`}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="text-center text-gray-400">
                          <div className="text-4xl mb-2">{getStatusIcon(photo.status)}</div>
                          <div className="text-sm text-gray-600 mb-3">
                            {photo.status === 'uploaded' && 'Photo upload√©e'}
                            {photo.status === 'processing' && 'Analyse en cours...'}
                            {photo.status === 'error' && photo.error}
                          </div>
                          
                          {/* Barre de progression pour le statut processing */}
                          {photo.status === 'processing' && (
                            <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                              <div 
                                className="bg-blue-600 h-2 rounded-full transition-all duration-500 ease-out" 
                                style={{ width: `${photo.progress || 0}%` }}
                              ></div>
                            </div>
                          )}
                          
                          {/* Texte de progression */}
                          {photo.status === 'processing' && (
                            <div className="text-xs text-blue-600 font-medium">
                              {Math.round(photo.progress || 0)}% termin√©
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>

                  {/* C√¥t√© droit - Tableau de donn√©es */}
                  <div className="lg:col-span-2 space-y-6">
                    <div className="flex items-center justify-between bg-white p-4 rounded-lg shadow-sm">
                      <h3 className="text-xl font-bold text-gray-800">Objets dans {photo.roomName || currentRoom.name}</h3>
                      {photo.status === 'completed' && (
                        <div className="flex items-center space-x-3">
                          <div className="flex space-x-2">
                            <button
                              onClick={() => selectAllItems(photoIndex)}
                              className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded hover:bg-green-200 transition-colors"
                            >
                              Tout s√©lectionner
                            </button>
                            <button
                              onClick={() => deselectAllItems(photoIndex)}
                              className="text-xs bg-red-100 text-red-700 px-2 py-1 rounded hover:bg-red-200 transition-colors"
                            >
                              Tout d√©s√©lectionner
                            </button>
                          </div>
                          <span className="text-base font-semibold text-blue-600 bg-blue-50 px-3 py-1 rounded-full">
                            {photo.analysis?.items?.length || 0} objet(s) dans {photo.roomName || currentRoom.name}
                          </span>
                        </div>
                      )}
                    </div>

                    {photo.status === 'completed' && photo.analysis ? (
                      <>
                        {/* Version desktop - Tableau */}
                        <div className="hidden lg:block overflow-x-auto">
                          <table className="min-w-full text-base border-collapse bg-white rounded-lg shadow-sm">
                            <thead>
                              <tr className="border-b-2 border-gray-200 bg-gray-50">
                                <th className="text-center p-3 font-semibold text-gray-700 w-16">S√©lectionner</th>
                                <th className="text-left p-3 font-semibold text-gray-700 w-24">Type</th>
                                <th className="text-left p-3 font-semibold text-gray-700 min-w-40">Description</th>
                                <th className="text-left p-3 font-semibold text-gray-700 w-32">Mesures</th>
                                <th className="text-left p-3 font-semibold text-gray-700 w-20">m¬≥</th>
                                <th className="text-left p-3 font-semibold text-gray-700 w-32">Notes</th>
                                <th className="text-left p-3 font-semibold text-gray-700 w-24">Confiance</th>
                              </tr>
                            </thead>
                            <tbody>
                              {photo.analysis.items?.map((item: TInventoryItem, itemIndex: number) => {
                                // G√©n√©rer les notes avec fragile si applicable
                                const notes = getEnrichedNotes(item);
                                
                                // V√©rifier si l'objet est s√©lectionn√©
                                const isSelected = isItemSelected(photo, itemIndex);
                                
                                return (
                                  <tr key={itemIndex} className={`border-b border-gray-100 hover:bg-blue-50 transition-colors ${!isSelected ? 'opacity-50 bg-gray-50' : ''}`}>
                                    <td className="p-3 text-center">
                                      <input
                                        type="checkbox"
                                        checked={isSelected}
                                        onChange={() => toggleItemSelection(photoIndex, itemIndex)}
                                        className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                                      />
                                    </td>
                                    <td className="p-3">
                                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                                        item.category === 'furniture' ? 'bg-blue-100 text-blue-800' :
                                        item.category === 'appliance' ? 'bg-green-100 text-green-800' :
                                        item.category === 'box' ? 'bg-yellow-100 text-yellow-800' :
                                        item.category === 'art' ? 'bg-purple-100 text-purple-800' :
                                        'bg-gray-100 text-gray-800'
                                      }`}>
                                        {translateCategory(item.category)}
                                      </span>
                                    </td>
                                    <td className="p-3">
                                      <span className="font-semibold text-gray-900 text-sm">{enrichDescription(item)}</span>
                                    </td>
                                    <td className="p-3">
                                      {item.dimensions_cm ? (
                                        <span className="text-xs text-gray-700 font-mono">
                                          {(() => {
                                            const dims = [item.dimensions_cm.length, item.dimensions_cm.width, item.dimensions_cm.height];
                                            const validDims = dims.filter(d => d && d > 0);
                                            if (validDims.length === 3) {
                                              return `${dims[0]} √ó ${dims[1]} √ó ${dims[2]} cm`;
                                            } else if (validDims.length > 0) {
                                              return `${validDims.join(' √ó ')} cm`;
                                            } else {
                                              return 'Dimensions non disponibles';
                                            }
                                          })()}
                                        </span>
                                      ) : (
                                        <span className="text-xs text-gray-500 italic">Non mesur√©</span>
                                      )}
                                    </td>
                                    <td className="p-3">
                                      <span className="text-sm font-bold text-blue-600">{roundUpVolume(item.volume_m3 || 0)}</span>
                                    </td>
                                    <td className="p-3">
                                      <span className="text-xs text-gray-600">{notes || '-'}</span>
                                    </td>
                                    <td className="p-3">
                                      <div className="flex items-center space-x-2">
                                        <div className="w-16 bg-gray-200 rounded-full h-2">
                                          <div 
                                            className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                                            style={{ width: `${(item.confidence || 0) * 100}%` }}
                                          ></div>
                                        </div>
                                        <span className="text-xs font-semibold text-gray-700">{Math.round((item.confidence || 0) * 100)}%</span>
                                      </div>
                                    </td>
                                  </tr>
                                );
                              })}
                              
                            </tbody>
                          </table>
                        </div>

                        {/* Version mobile - Cards optimis√©es pour une ligne */}
                        <div className="lg:hidden space-y-2">
                          {photo.analysis.items?.map((item: TInventoryItem, itemIndex: number) => {
                            // V√©rifier si l'objet est s√©lectionn√©
                            const isSelected = isItemSelected(photo, itemIndex);
                            
                            return (
                              <div key={itemIndex} className={`bg-white p-3 rounded-lg border shadow-sm ${!isSelected ? 'opacity-50 bg-gray-50' : ''}`}>
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center space-x-3 flex-1">
                                    <input
                                      type="checkbox"
                                      checked={isSelected}
                                      onChange={() => toggleItemSelection(photoIndex, itemIndex)}
                                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                                    />
                                    <div className="flex-1">
                                      <h4 className="font-semibold text-gray-900 text-sm">{enrichDescription(item)}</h4>
                                    </div>
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <span className="text-sm font-bold text-blue-600">{roundUpVolume(item.volume_m3 || 0)} m¬≥</span>
                                    <span className="text-xs font-semibold text-gray-700">{Math.round((item.confidence || 0) * 100)}%</span>
                                  </div>
                                </div>
                              </div>
                            );
                          })}
                          
                        </div>

                      </>
                    ) : photo.status === 'error' ? (
                      <div className="p-6 bg-red-50 rounded-lg border border-red-200">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">‚ùå</span>
                          <div>
                            <h4 className="text-lg font-semibold text-red-800">Erreur d'analyse</h4>
                            <p className="text-base text-red-600 mt-1">{photo.error}</p>
                            <button
                              onClick={() => processPhotoAsync(photoIndex, photo.file, photo.photoId!)}
                              className="mt-2 text-sm bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200 transition-colors"
                            >
                              R√©essayer
                            </button>
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="p-6 bg-gray-50 rounded-lg border border-gray-200 text-center">
                        <div className="flex flex-col items-center space-y-3">
                          <span className="text-4xl">{getStatusIcon(photo.status)}</span>
                          <div>
                            <h4 className="text-lg font-semibold text-gray-700">
                              {photo.status === 'uploaded' ? 'Photo upload√©e' : 
                               photo.status === 'processing' ? 'Analyse en cours...' : 
                               'En attente d\'analyse...'}
                            </h4>
                            <p className="text-base text-gray-600 mt-1">
                              {photo.status === 'uploaded' ? 'L\'image sera analys√©e automatiquement' :
                               photo.status === 'processing' ? 'L\'IA d√©tecte les objets...' :
                               'L\'image sera analys√©e automatiquement'}
                            </p>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}



        {/* √âtape 4 - Envoyer le devis */}
        {currentStep === 4 && (
          <div className="max-w-4xl mx-auto">
            <div className="bg-white p-8 rounded-lg border border-gray-200">
              <h3 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                <span className="text-3xl mr-3">üì§</span>
                Envoyer votre demande de devis
              </h3>
              <p className="text-gray-600 mb-6">
                Votre demande est pr√™te ! V√©rifiez les informations ci-dessous avant d'envoyer votre demande de devis.
              </p>
              
              {/* Volume √† d√©m√©nager */}
              <div className="bg-blue-50 p-6 rounded-lg mb-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-4">üì¶ Volume √† d√©m√©nager</h4>
                <div className="text-center text-gray-500">
                  <p className="text-sm">Contenu √† d√©finir</p>
                </div>
              </div>

              {/* Volume pr√©vu apr√®s emballage */}
              <div className="bg-orange-50 p-6 rounded-lg mb-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-4">üìã Volume pr√©vu apr√®s emballage</h4>
                <div className="text-center text-gray-500">
                  <p className="text-sm">Contenu √† d√©finir</p>
                </div>
              </div>

              {/* R√©capitulatif des donn√©es du formulaire */}
              <div className="bg-gray-50 p-6 rounded-lg mb-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-4">üìù R√©capitulatif des informations du formulaire</h4>
                {quoteFormData ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium">Nom :</span> {quoteFormData.firstName} {quoteFormData.lastName}
                    </div>
                    <div>
                      <span className="font-medium">Email :</span> {quoteFormData.email}
                    </div>
                    <div>
                      <span className="font-medium">T√©l√©phone :</span> {quoteFormData.phone}
                    </div>
                    <div>
                      <span className="font-medium">Date de d√©m√©nagement :</span> {quoteFormData.movingDate ? 
                        new Date(quoteFormData.movingDate).toLocaleDateString('fr-FR') : 
                        'Non renseign√©e'
                      }
                      {quoteFormData.flexibleDate && (
                        <span className="ml-2 text-sm text-blue-600">(¬± 3 jours)</span>
                      )}
                    </div>
                    <div>
                      <span className="font-medium">D√©part :</span> {quoteFormData.departureCity || 'Non renseign√©'}
                    </div>
                    <div>
                      <span className="font-medium">Arriv√©e :</span> {quoteFormData.arrivalCity || 'Non renseign√©'}
                    </div>
                    {quoteFormData.distance && (
                      <div>
                        <span className="font-medium">Distance :</span> {quoteFormData.distance} km
                      </div>
                    )}
                    <div>
                      <span className="font-medium">Offre choisie :</span> {quoteFormData.selectedOffer ? 
                        (() => {
                          const offers: { [key: string]: string } = {
                            'economique': '1. √âconomique üí∞',
                            'standard': '2. Standard ‚≠ê',
                            'premium': '3. Premium üëë'
                          };
                          return offers[quoteFormData.selectedOffer] || 'Non renseign√©e';
                        })() : 
                        'Non renseign√©e'
                      }
                    </div>
                  </div>
                ) : (
                  <div className="text-center text-gray-500">
                    <p className="text-sm">Aucune information de formulaire disponible</p>
                  </div>
                )}
              </div>
              
              {/* R√©capitulatif de l'inventaire */}
              {currentRoom.photos.some(p => p.status === 'completed') && (
                <div className="bg-blue-50 p-6 rounded-lg mb-6">
                  <h4 className="text-lg font-semibold text-gray-900 mb-4">Inventaire d√©tect√©</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium">Nombre d'objets :</span> {totalVolumeSelected.totalItems}
                    </div>
                    <div>
                      <span className="font-medium">Volume total :</span> {totalVolumeSelected.totalVolume} m¬≥
                    </div>
                    <div>
                      <span className="font-medium">Photos analys√©es :</span> {currentRoom.photos.filter(p => p.status === 'completed').length}
                    </div>
                  </div>
                </div>
              )}

              {/* Estimation de prix */}
              {quoteFormData && quoteFormData.selectedOffer && totalVolumeSelected.totalVolume > 0 && (
                <div className="bg-green-50 p-6 rounded-lg mb-6">
                  <h4 className="text-lg font-semibold text-gray-900 mb-4">Estimation de prix</h4>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-green-600 mb-2">
                      {(() => {
                        const basePrice = totalVolumeSelected.totalVolume * 50; // 50‚Ç¨/m¬≥ de base
                        const offerMultiplier: { [key: string]: number } = {
                          'economique': 1,
                          'standard': 1.3,
                          'premium': 1.6
                        };
                        const distanceMultiplier = quoteFormData.distance ? Math.max(1, quoteFormData.distance / 100) : 1;
                        const finalPrice = Math.round(basePrice * (offerMultiplier[quoteFormData.selectedOffer] || 1) * distanceMultiplier);
                        return `${finalPrice}‚Ç¨`;
                      })()}
                    </div>
                    <p className="text-sm text-gray-600">
                      Estimation bas√©e sur {totalVolumeSelected.totalVolume} m¬≥ et l'offre {quoteFormData.selectedOffer === 'economique' ? '√âconomique' : quoteFormData.selectedOffer === 'standard' ? 'Standard' : 'Premium'}
                    </p>
                    <p className="text-xs text-gray-500 mt-2">
                      * Prix indicatif - devis personnalis√© apr√®s validation
                    </p>
                  </div>
                </div>
              )}
              
              {/* Boutons d'action */}
              <div className="flex justify-between pt-6">
                <button
                  onClick={() => setCurrentStep(3)}
                  disabled={isSubmittingQuote}
                  className="px-6 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  ‚Üê Modifier la demande
                </button>
                
                <button
                  onClick={handleSubmitQuote}
                  disabled={isSubmittingQuote}
                  className="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                >
                  {isSubmittingQuote ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      <span>Envoi en cours...</span>
                    </>
                  ) : (
                    <>
                      <span>üì§</span>
                      <span>Envoyer la demande de devis</span>
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}
    </>
  );

  return (
    <main className={`min-h-screen ${isEmbedded ? 'iframe-mode' : 'bg-[var(--mz-bg)]'}`}>
      {/* Header moderne - seulement si pas en mode embed */}
      {!isEmbedded && (
        <div className="bg-white shadow-sm border-b border-gray-100">
          <div className="max-w-7xl mx-auto px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-[var(--mz-teal)] rounded-xl flex items-center justify-center">
                    <span className="text-white font-bold text-lg">M</span>
                  </div>
                  <div>
                    <h1 className="text-2xl font-bold text-[var(--mz-navy)]">
                      Inventaire IA
                    </h1>
                    <p className="text-sm text-gray-600">
                      Analyse automatique pour d√©m√©nagement
                    </p>
                  </div>
                </div>
                <div className="flex flex-col items-end space-y-1">
                  <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                    {getBuildInfo()}
                  </span>
                  <div className="flex items-center space-x-1">
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                    <span className="text-xs text-gray-400">
                      Last update: {currentTime ? currentTime.toLocaleTimeString('fr-FR') : '--:--:--'}
                    </span>
                  </div>
                </div>
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={() => setActiveTab('tests')}
                  className={`px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 ${
                    activeTab === 'tests' 
                      ? 'bg-[var(--mz-teal)] text-white shadow-lg' 
                      : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-200'
                  }`}
                >
                  üß™ Tests
                </button>
                <button
                  onClick={() => setActiveTab('backoffice')}
                  className={`px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 ${
                    activeTab === 'backoffice' 
                      ? 'bg-[var(--mz-teal)] text-white shadow-lg' 
                      : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-200'
                  }`}
                >
                  üîß Back-office
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Navigation par onglets - seulement si pas en mode embed */}
      {!isEmbedded && (
        <div className="bg-white border-b">
          <div className="max-w-7xl mx-auto px-4 lg:px-6">
            <div className="flex space-x-4 lg:space-x-8">
              <button
                onClick={() => setActiveTab('tests')}
                className={`py-3 lg:py-4 px-2 lg:px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === 'tests'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                üß™ Tests
              </button>
              <button
                onClick={() => setActiveTab('backoffice')}
                className={`py-3 lg:py-4 px-2 lg:px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === 'backoffice'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                üîß Back-office
              </button>
            </div>
          </div>
        </div>
      )}

      {/* √âtapes du workflow - seulement si pas en mode embed et onglet tests */}
      {!isEmbedded && activeTab === 'tests' && (
        <WorkflowSteps 
          currentStep={currentStep}
          onStepChange={handleStepChange}
          steps={workflowSteps}
        />
      )}

      {/* Contenu selon l'onglet actif */}
      <div className={`${isEmbedded ? 'p-4' : 'p-6'} max-w-7xl mx-auto`}>
        {isEmbedded ? renderTestsInterface() : (activeTab === 'tests' ? renderTestsInterface() : <BackOffice />)}
      </div>
    </main>
  );
}