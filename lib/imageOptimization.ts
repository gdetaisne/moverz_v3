import sharp from "sharp";
import crypto from "crypto";

export interface OptimizedImage {
  buffer: Buffer;
  hash: string;
  originalSize: number;
  optimizedSize: number;
}

export async function optimizeImageForAI(inputBuffer: Buffer): Promise<OptimizedImage> {
  const startTime = Date.now();
  const originalSize = inputBuffer.length;
  
  // D√©terminer la taille optimale bas√©e sur la taille originale - OPTIMIS√â MAXIMUM POUR CLAUDE
  let targetSize = 384; // Taille tr√®s r√©duite pour minimiser le transfert (√©tait 512)
  if (originalSize > 5 * 1024 * 1024) { // > 5MB
    targetSize = 256; // Tr√®s petit pour les tr√®s grandes images
  } else if (originalSize > 2 * 1024 * 1024) { // > 2MB
    targetSize = 320; // Taille interm√©diaire tr√®s r√©duite
  }
  
  // Optimiser l'image pour l'IA : taille adaptative, qualit√© 80%
  // + Correction automatique de l'orientation EXIF
  const optimizedBuffer = await sharp(inputBuffer)
    .rotate() // Correction automatique de l'orientation selon EXIF
    .resize(targetSize, targetSize, { 
      fit: 'inside', 
      withoutEnlargement: true,
      fastShrinkOnLoad: true // Plus rapide pour les grandes images
    })
    .jpeg({ 
      quality: 55, // Qualit√© tr√®s r√©duite pour minimiser le transfert (√©tait 65)
      progressive: true,
      mozjpeg: true, // Compression optimis√©e
      optimizeScans: true, // Optimisation suppl√©mentaire
      trellisQuantisation: true, // Compression avanc√©e
      overshootDeringing: true // R√©duction d'artefacts
    })
    .toBuffer();

  // G√©n√©rer un hash pour le cache
  const hash = crypto.createHash('sha256').update(optimizedBuffer).digest('hex');
  
  const processingTime = Date.now() - startTime;
  console.log(`üñºÔ∏è [TIMING] Optimisation Sharp: ${processingTime}ms - ${originalSize}‚Üí${optimizedBuffer.length} bytes (${Math.round((1 - optimizedBuffer.length/originalSize) * 100)}% r√©duction)`);

  return {
    buffer: optimizedBuffer,
    hash,
    originalSize,
    optimizedSize: optimizedBuffer.length
  };
}

export function getImageHash(buffer: Buffer): string {
  return crypto.createHash('sha256').update(buffer).digest('hex');
}
