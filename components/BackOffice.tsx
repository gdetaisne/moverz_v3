"use client";
import { useState, useEffect } from "react";
import { AISettings, DEFAULT_AI_SETTINGS, getAISettings, saveAISettings, resetAISettings } from "@/lib/settings";
import { getPackagingRulesForDisplay } from "@/lib/packaging";

export default function BackOffice() {
  const [settings, setSettings] = useState<AISettings>(DEFAULT_AI_SETTINGS);
  const [isModified, setIsModified] = useState(false);
  const [activeSection, setActiveSection] = useState<'overview' | 'configuration' | 'prompts' | 'packaging' | 'json'>('overview');

  useEffect(() => {
    const loadSettings = async () => {
      try {
        // Charger depuis le serveur en priorit√©
        const response = await fetch('/api/ai-settings');
        if (response.ok) {
          const serverSettings = await response.json();
          setSettings(serverSettings);
          console.log('Param√®tres IA charg√©s depuis le serveur');
        } else {
          // Fallback sur les param√®tres locaux
          setSettings(getAISettings());
          console.log('Param√®tres IA charg√©s depuis le localStorage');
        }
      } catch (error) {
        console.warn('Erreur lors du chargement des param√®tres IA:', error);
        setSettings(getAISettings());
      }
    };
    
    loadSettings();
  }, []);

  const handleSave = async () => {
    try {
      // Sauvegarder c√¥t√© client
      saveAISettings(settings);
      
      // Sauvegarder c√¥t√© serveur
      const response = await fetch('/api/ai-settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(settings),
      });
      
      if (response.ok) {
        setIsModified(false);
        alert("Param√®tres sauvegard√©s c√¥t√© client et serveur !");
      } else {
        console.warn('Erreur lors de la sauvegarde c√¥t√© serveur');
        alert("Param√®tres sauvegard√©s c√¥t√© client uniquement !");
      }
    } catch (error) {
      console.error('Erreur lors de la sauvegarde:', error);
      alert("Erreur lors de la sauvegarde !");
    }
  };

  const handleReset = () => {
    const defaultSettings = resetAISettings();
    setSettings(defaultSettings);
    setIsModified(false);
    alert("Param√®tres r√©initialis√©s aux valeurs par d√©faut !");
  };

  const updateSetting = <K extends keyof AISettings>(key: K, value: AISettings[K]) => {
    setSettings(prev => ({ ...prev, [key]: value }));
    setIsModified(true);
  };

  // G√©n√©rer la synth√®se de fonctionnement
  const generateAISummary = () => {
    const hasApiKey = settings.openaiApiKey && settings.openaiApiKey.length > 0;
    const mode = hasApiKey ? "Mode IA R√©el" : "Mode Mock/D√©mo";
    const status = hasApiKey ? "‚úÖ Actif" : "‚ö†Ô∏è Inactif (donn√©es simul√©es)";
    
    return {
      mode,
      status,
      model: settings.model,
      temperature: settings.temperature,
      maxTokens: settings.maxTokens || "Illimit√©",
      hasApiKey,
      promptLength: settings.systemPrompt.length + settings.userPrompt.length,
      estimatedCost: hasApiKey ? "~$0.01-0.10 par photo" : "Gratuit (mode d√©mo)"
    };
  };

  const summary = generateAISummary();

  return (
    <div className="max-w-7xl mx-auto p-4 lg:p-6">
      <div className="mb-6 lg:mb-8">
        <h1 className="text-2xl lg:text-3xl font-bold text-gray-800 mb-2">üîß Back-office IA</h1>
        <p className="text-base lg:text-lg text-gray-600">Configuration et monitoring du syst√®me d'analyse IA</p>
      </div>

      {/* Navigation par sections */}
      <div className="mb-8">
        <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
          {[
            { id: 'overview', label: 'ü§ñ Synth√®se IA', icon: 'üìä' },
            { id: 'configuration', label: '‚öôÔ∏è Configuration', icon: 'üîß' },
            { id: 'prompts', label: 'üí¨ Prompts', icon: 'üìù' },
            { id: 'packaging', label: 'üì¶ Emballage', icon: 'üì¶' },
            { id: 'json', label: 'üìã Sch√©ma JSON', icon: 'üîç' }
          ].map((section) => (
            <button
              key={section.id}
              onClick={() => setActiveSection(section.id as any)}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeSection === section.id
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              {section.icon} {section.label}
            </button>
          ))}
        </div>
      </div>

      {/* Section Synth√®se IA */}
      {activeSection === 'overview' && (
        <div className="space-y-6">
          {/* Bloc principal IA */}
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-xl border border-blue-200">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-2xl font-bold text-gray-800 flex items-center">
                ü§ñ Syst√®me d'Analyse IA
                <span className={`ml-3 px-3 py-1 rounded-full text-sm font-medium ${
                  summary.hasApiKey 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {summary.status}
                </span>
              </h2>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
              <div className="bg-white p-4 rounded-lg border">
                <div className="text-sm text-gray-600 mb-1">Mode</div>
                <div className="font-semibold text-gray-900">{summary.mode}</div>
              </div>
              <div className="bg-white p-4 rounded-lg border">
                <div className="text-sm text-gray-600 mb-1">Mod√®le</div>
                <div className="font-semibold text-gray-900">{summary.model}</div>
              </div>
              <div className="bg-white p-4 rounded-lg border">
                <div className="text-sm text-gray-600 mb-1">Temp√©rature</div>
                <div className="font-semibold text-gray-900">{summary.temperature}</div>
              </div>
              <div className="bg-white p-4 rounded-lg border">
                <div className="text-sm text-gray-600 mb-1">Co√ªt estim√©</div>
                <div className="font-semibold text-gray-900">{summary.estimatedCost}</div>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg border">
              <h3 className="font-semibold text-gray-800 mb-3">üìä Fonctionnement du syst√®me</h3>
              <div className="space-y-3 text-sm text-gray-700">
                <div className="flex items-start space-x-2">
                  <span className="text-blue-500">1.</span>
                  <span><strong>Upload photo</strong> ‚Üí Image convertie en Base64 et optimis√©e</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-500">2.</span>
                  <span><strong>Prompt syst√®me</strong> ‚Üí Instructions g√©n√©rales ({settings.systemPrompt.length} caract√®res)</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-500">3.</span>
                  <span><strong>Prompt utilisateur</strong> ‚Üí Sch√©ma JSON + instructions ({settings.userPrompt.length} caract√®res)</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-500">4.</span>
                  <span><strong>API OpenAI</strong> ‚Üí Analyse avec {summary.model} (temp√©rature: {summary.temperature})</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-500">5.</span>
                  <span><strong>Validation</strong> ‚Üí Sch√©ma Zod + enrichissement catalogue</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-500">6.</span>
                  <span><strong>Cache</strong> ‚Üí R√©sultat mis en cache pour √©viter les re-analyses</span>
                </div>
              </div>
            </div>
          </div>

          {/* Actions rapides */}
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">‚ö° Actions rapides</h3>
            <div className="flex flex-wrap gap-4">
              <button
                onClick={handleSave}
                disabled={!isModified}
                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                  isModified
                    ? 'bg-blue-600 text-white hover:bg-blue-700'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                }`}
              >
                üíæ Sauvegarder
              </button>
              <button
                onClick={handleReset}
                className="px-4 py-2 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 transition-colors"
              >
                üîÑ R√©initialiser
              </button>
              <button
                onClick={() => setActiveSection('configuration')}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg font-medium hover:bg-gray-700 transition-colors"
              >
                ‚öôÔ∏è Configurer
              </button>
            </div>
            {isModified && (
              <p className="text-sm text-orange-700 font-medium mt-3">‚ö†Ô∏è Modifications non sauvegard√©es</p>
            )}
          </div>
        </div>
      )}

      {/* Section Configuration */}
      {activeSection === 'configuration' && (
        <div className="space-y-6">
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h2 className="text-xl font-bold text-gray-800 mb-4">üîë Cl√© API OpenAI</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-semibold text-gray-800 mb-2">
                  Cl√© API (sk-...)
                </label>
                <input
                  type="password"
                  value={settings.openaiApiKey || ''}
                  onChange={(e) => updateSetting('openaiApiKey', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono"
                  placeholder="sk-proj-..."
                />
                <p className="text-sm text-gray-600 mt-1">
                  {summary.hasApiKey ? '‚úÖ Cl√© configur√©e' : '‚ö†Ô∏è Aucune cl√© - mode d√©mo activ√©'}
                </p>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-white p-6 rounded-xl shadow-sm border">
              <h2 className="text-xl font-bold text-gray-800 mb-4">‚öôÔ∏è Param√®tres IA</h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold text-gray-800 mb-2">
                    Mod√®le IA
                  </label>
                  <select
                    value={settings.model}
                    onChange={(e) => updateSetting('model', e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="gpt-4o-mini">GPT-4o Mini (Recommand√©)</option>
                    <option value="gpt-4o">GPT-4o</option>
                    <option value="gpt-4-vision-preview">GPT-4 Vision</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-800 mb-2">
                    Temp√©rature (0.0 - 2.0)
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="2"
                    step="0.1"
                    value={settings.temperature}
                    onChange={(e) => updateSetting('temperature', parseFloat(e.target.value))}
                    className="w-full"
                  />
                  <div className="flex justify-between text-sm text-gray-700 mt-1">
                    <span>D√©terministe</span>
                    <span className="font-semibold text-gray-800">{settings.temperature}</span>
                    <span>Cr√©atif</span>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-800 mb-2">
                    Max Tokens
                  </label>
                  <input
                    type="number"
                    value={settings.maxTokens || ''}
                    onChange={(e) => updateSetting('maxTokens', parseInt(e.target.value) || undefined)}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="2000"
                  />
                  <p className="text-sm text-gray-600 mt-1">Laisser vide pour illimit√©</p>
                </div>
              </div>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-sm border">
              <h2 className="text-xl font-bold text-gray-800 mb-4">üìä Statistiques</h2>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-600">Longueur prompt total</span>
                  <span className="font-semibold">{summary.promptLength} caract√®res</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Mod√®le actuel</span>
                  <span className="font-semibold">{summary.model}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Temp√©rature</span>
                  <span className="font-semibold">{summary.temperature}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Max tokens</span>
                  <span className="font-semibold">{summary.maxTokens}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Mode</span>
                  <span className={`font-semibold ${summary.hasApiKey ? 'text-green-600' : 'text-yellow-600'}`}>
                    {summary.mode}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Section Prompts */}
      {activeSection === 'prompts' && (
        <div className="space-y-6">
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h2 className="text-xl font-bold text-gray-800 mb-4">üí¨ Prompt Syst√®me</h2>
            <textarea
              value={settings.systemPrompt}
              onChange={(e) => updateSetting('systemPrompt', e.target.value)}
              rows={8}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm text-gray-900"
              placeholder="Instructions g√©n√©rales pour l'IA..."
            />
            <p className="text-sm text-gray-700 mt-2">
              Instructions g√©n√©rales donn√©es √† l'IA avant chaque analyse ({settings.systemPrompt.length} caract√®res)
            </p>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h2 className="text-xl font-bold text-gray-800 mb-4">üìù Prompt Utilisateur</h2>
            <textarea
              value={settings.userPrompt}
              onChange={(e) => updateSetting('userPrompt', e.target.value)}
              rows={12}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm text-gray-900"
              placeholder="Instructions sp√©cifiques et sch√©ma JSON..."
            />
            <p className="text-sm text-gray-700 mt-2">
              Instructions d√©taill√©es et sch√©ma JSON pour l'analyse des images ({settings.userPrompt.length} caract√®res)
            </p>
          </div>
        </div>
      )}

      {/* Section Emballage */}
      {activeSection === 'packaging' && (
        <div className="space-y-6">
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h2 className="text-xl font-bold text-gray-800 mb-4">üì¶ R√®gles d'Emballage</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Configuration du carton standard */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h3 className="font-semibold text-blue-800 mb-3">üì¶ Carton Standard</h3>
                <div className="space-y-2 text-sm">
                  <div><strong>Volume:</strong> {getPackagingRulesForDisplay().cartonStandard.volume} M¬≥</div>
                  <div><strong>Dimensions:</strong> {getPackagingRulesForDisplay().cartonStandard.dimensions.length} √ó {getPackagingRulesForDisplay().cartonStandard.dimensions.width} √ó {getPackagingRulesForDisplay().cartonStandard.dimensions.height} cm</div>
                  <div className="text-gray-600">{getPackagingRulesForDisplay().cartonStandard.description}</div>
                </div>
              </div>

              {/* Seuil de classification */}
              <div className="bg-yellow-50 p-4 rounded-lg">
                <h3 className="font-semibold text-yellow-800 mb-3">üìè Classification</h3>
                <div className="space-y-2 text-sm">
                  <div><strong>Seuil petit objet:</strong> ‚â§ {getPackagingRulesForDisplay().threshold.smallObjectLimit} M¬≥</div>
                  <div className="text-gray-600">{getPackagingRulesForDisplay().threshold.description}</div>
                </div>
              </div>
            </div>

            {/* R√®gles d'emballage */}
            <div className="mt-6">
              <h3 className="font-semibold text-gray-800 mb-4">üìã R√®gles d'Emballage</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                
                {/* Petits objets non fragiles */}
                <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">üì¶</span>
                    <h4 className="font-semibold text-green-800">Petits Objets</h4>
                  </div>
                  <div className="text-sm space-y-1">
                    <div><strong>Condition:</strong> {getPackagingRulesForDisplay().rules.smallNonFragile.description}</div>
                    <div><strong>Augmentation:</strong> +{getPackagingRulesForDisplay().rules.smallNonFragile.increase}</div>
                    <div><strong>Destination:</strong> {getPackagingRulesForDisplay().rules.smallNonFragile.destination}</div>
                  </div>
                </div>

                {/* Meubles non fragiles */}
                <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">ü™ë</span>
                    <h4 className="font-semibold text-blue-800">Meubles</h4>
                  </div>
                  <div className="text-sm space-y-1">
                    <div><strong>Condition:</strong> {getPackagingRulesForDisplay().rules.furnitureNonFragile.description}</div>
                    <div><strong>Augmentation:</strong> +{getPackagingRulesForDisplay().rules.furnitureNonFragile.increase}</div>
                    <div><strong>Destination:</strong> {getPackagingRulesForDisplay().rules.furnitureNonFragile.destination}</div>
                  </div>
                </div>

                {/* Objets fragiles */}
                <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">‚ö†Ô∏è</span>
                    <h4 className="font-semibold text-red-800">Objets Fragiles</h4>
                  </div>
                  <div className="text-sm space-y-1">
                    <div><strong>Condition:</strong> {getPackagingRulesForDisplay().rules.fragile.description}</div>
                    <div><strong>Multiplicateur:</strong> √ó{getPackagingRulesForDisplay().rules.fragile.multiplier}</div>
                    <div><strong>Destination:</strong> {getPackagingRulesForDisplay().rules.fragile.destination}</div>
                  </div>
                </div>

                {/* Objets d√©montables */}
                <div className="bg-emerald-50 p-4 rounded-lg border border-emerald-200">
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">üîß</span>
                    <h4 className="font-semibold text-emerald-800">Objets D√©montables</h4>
                  </div>
                  <div className="text-sm space-y-1">
                    <div><strong>Condition:</strong> {getPackagingRulesForDisplay().rules.dismountable.description}</div>
                    <div><strong>R√©duction:</strong> {getPackagingRulesForDisplay().rules.dismountable.reduction}</div>
                    <div><strong>Destination:</strong> {getPackagingRulesForDisplay().rules.dismountable.destination}</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Exemples de calcul */}
            <div className="mt-6 bg-gray-50 p-4 rounded-lg">
              <h3 className="font-semibold text-gray-800 mb-3">üßÆ Exemples de Calcul</h3>
              <div className="text-sm space-y-2">
                <div><strong>Petit objet (0.03 M¬≥, non fragile):</strong> 0.03 √ó 1.10 = 0.033 M¬≥ ‚Üí "55% d'un carton"</div>
                <div><strong>Meuble (0.5 M¬≥, non fragile):</strong> 0.5 √ó 1.05 = 0.525 M¬≥ ‚Üí "0.525 M¬≥ emball√©s"</div>
                <div><strong>Vase (0.02 M¬≥, fragile):</strong> 0.02 √ó 2.0 = 0.04 M¬≥ ‚Üí "66.7% d'un carton"</div>
                <div><strong>Armoire (1.0 M¬≥, d√©montable):</strong> 1.0 √ó 1.05 √ó 0.7 = 0.735 M¬≥ ‚Üí "0.735 M¬≥ emball√©s"</div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Section Sch√©ma JSON */}
      {activeSection === 'json' && (
        <div className="space-y-6">
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h2 className="text-xl font-bold text-gray-800 mb-4">üìã Sch√©ma JSON de sortie</h2>
            <div className="bg-gray-50 p-4 rounded-lg">
              <pre className="text-sm font-mono text-gray-800 whitespace-pre-wrap overflow-x-auto">
{`{
  "items": [
    {
      "label": "string",                  // Nom de l'objet
      "category": "furniture|appliance|box|art|misc",
      "confidence": 0-1,                  // Confiance de d√©tection
      "quantity": 1,                      // Quantit√©
      "dimensions_cm": {
        "length": null,
        "width": null,
        "height": null,
        "source": "estimated|catalog"
      },
      "volume_m3": 0,                    // Volume en m¬≥
      "fragile": true,                   // Objet fragile
      "stackable": false,                // Empilable
      "notes": "string|null"             // Notes additionnelles
    }
  ],
  "totals": {
    "count_items": 0,                    // Nombre total d'objets
    "volume_m3": 0                       // Volume total en m¬≥
  },
  "special_rules": {
    "autres_objets": {
      "present": true,                   // Autres objets pr√©sents
      "listed_items": ["string"],        // Liste des autres objets
      "volume_m3": 0                     // Volume des autres objets
    }
  }
}`}
              </pre>
            </div>
            <p className="text-sm text-gray-700 mt-3">
              Ce sch√©ma est utilis√© pour valider et structurer les r√©ponses de l'IA
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
