// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model User {
  id             String             @id @default(uuid())
  email          String?            @unique
  projects       Project[]
  rooms          Room[]
  modifications  UserModification[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Room {
  id        String   @id @default(uuid())
  name      String
  roomType  String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roomType], name: "userId_roomType")
  @@index([userId])
}

model Project {
  id              String   @id @default(uuid())
  name            String
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos          Photo[]
  batches         Batch[]
  
  // Formulaire demande (étape 3)
  customerName    String?
  customerEmail   String?
  customerPhone   String?
  customerAddress String?
  moveDate        DateTime?
  currentStep     Int      @default(1)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@unique([userId, name], name: "userId_name")
}

enum PhotoStatus {
  PENDING
  PROCESSING
  DONE
  ERROR
}

enum BatchStatus {
  QUEUED
  PROCESSING
  PARTIAL
  COMPLETED
  FAILED
}

model Batch {
  id               String      @id @default(uuid())
  projectId        String
  project          Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId           String
  status           BatchStatus @default(QUEUED)
  
  // Compteurs pour performance
  countsQueued     Int         @default(0)
  countsProcessing Int         @default(0)
  countsCompleted  Int         @default(0)
  countsFailed     Int         @default(0)
  
  // Flag pour éviter multiple triggers inventory-sync
  inventoryQueued  Boolean     @default(false)
  
  // Relations
  photos           Photo[]
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  @@index([projectId])
  @@index([userId])
  @@index([status])
}

model Photo {
  id           String      @id @default(uuid())
  projectId    String
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  batchId      String?
  batch        Batch?      @relation(fields: [batchId], references: [id], onDelete: SetNull)
  filename     String
  filePath     String
  url          String
  roomType     String?
  analysis     Json?
  status       PhotoStatus @default(PENDING)
  errorCode    String?
  errorMessage String?
  processedAt  DateTime?
  
  // Checksum pour détection duplicates (optionnel)
  checksum     String?
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([projectId])
  @@index([batchId])
  @@index([status])
}

model UserModification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoId     String
  itemIndex   Int
  field       String   // 'dismountable' | 'fragile' | 'selected'
  value       String   // JSON value
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, photoId, itemIndex, field])
  @@index([userId])
  @@index([photoId])
}

// LOT 7.5 - AI Metrics & Observability
model AiMetric {
  id          String   @id @default(cuid())
  ts          DateTime @default(now())
  provider    String   // 'anthropic' | 'openai' | 'mock' | 'other'
  model       String
  operation   String   // 'classify' | 'analyze_photo' | 'detect_room' | 'embed' | 'other'
  latencyMs   Int
  success     Boolean
  errorType   String?  // 'TIMEOUT' | 'RATE_LIMIT' | 'NETWORK' | 'PROVIDER_ERROR' | 'UNKNOWN'
  retries     Int      @default(0)
  tokensIn    Int?
  tokensOut   Int?
  costUsd     Float    @default(0)
  meta        Json?    // requestId, userId, roomType, photoId, batchId, etc.

  @@index([ts])
  @@index([provider, model])
  @@index([success])
  @@index([operation])
}

// LOT 8 - Direct S3/MinIO Upload
enum AssetStatus {
  PENDING
  UPLOADED
  PROCESSING
  READY
  ERROR
}

model Asset {
  id          String      @id @default(cuid())
  userId      String
  projectId   String?
  filename    String
  s3Key       String      @unique  // userId/yyyy/mm/dd/<uuid>.<ext>
  mime        String
  sizeBytes   Int         @default(0)
  status      AssetStatus @default(PENDING)
  uploadedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([projectId])
  @@index([status])
  @@index([createdAt])
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

model Job {
  id          String    @id @default(cuid())
  type        String    // 'analyze_photo' | 'detect_room' | 'generate_pdf'
  assetId     String?
  userId      String
  status      JobStatus @default(PENDING)
  progress    Int       @default(0)  // 0-100
  result      Json?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

// Analytics - Tracking utilisateur
model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String   // 'app_opened', 'step_reached', 'photo_uploaded', etc.
  metadata  Json?    // { step, photoId, duration_ms, ... }
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}
