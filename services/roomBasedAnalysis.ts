/**
 * üè† SERVICE D'ANALYSE PAR PI√àCE SIMPLIFI√â
 * 
 * Utilise uniquement Claude pour analyser toutes les photos d'une pi√®ce
 * selon les crit√®res historiques d'inventaire.
 */

import { TPhotoAnalysis } from "@/lib/schemas";
import { optimizeImageForAI } from "@/lib/imageOptimization";
import { calculatePackagedVolume } from "@/lib/packaging";
import { calculateDismountableProbability } from "@/lib/dismountable";
import { mapToCatalog, volumeFromDims } from "@/lib/normalize";
import { config } from '../config/app';
import { logger } from '@/lib/logger';
export interface RoomAnalysisRequest {
  roomType: string;
  photos: Array<{
  id: string;
  url: string;
  filename: string;
  }>;
  userId: string;
}

export interface RoomAnalysisResult extends TPhotoAnalysis {
  roomType: string;
  photoCount: number;
  analysisType: 'room-based-claude';
}

/**
 * Prompt syst√®me unifi√© pour l'analyse compl√®te par pi√®ce
 * Version am√©lior√©e avec gestion textile et contenu des meubles ferm√©s
 */
const ROOM_ANALYSIS_SYSTEM_PROMPT = `Tu es un expert en inventaire de d√©m√©nagement.

üè† **CONTEXTE GLOBAL** :
- Les photos sont d√©j√† regroup√©es par pi√®ce (le type de pi√®ce te sera fourni)
- Tu analyses PLUSIEURS PHOTOS DE LA M√äME PI√àCE sous diff√©rents angles
- Tu dois cr√©er UN SEUL inventaire fusionn√© pour TOUTE la pi√®ce

üìã TA T√ÇCHE EN 7 √âTAPES :

1. **D√âDUPLICATION ABSOLUE** : Ne compte JAMAIS un objet deux fois, m√™me s'il appara√Æt sur plusieurs photos
2. **IDENTIFICATION COMPL√àTE** : D√©tecte TOUS les meubles et objets mobiles visibles en fusionnant les points de vue
3. **COMPTAGE INTELLIGENT** : Regroupe les objets strictement identiques avec quantity > 1
4. **MESURES PR√âCISES** : D√©duis des dimensions approximatives en cm pour chaque objet
5. **CALCUL DE VOLUME** : Utilise la formule : (longueur_cm √ó largeur_cm √ó hauteur_cm) / 1_000_000 = volume_m3
6. **PROPRI√âT√âS** : Indique pour chaque objet : fragile, d√©montable, stackable, textile_included
7. **CONTENU √âVENTUEL** : Pour les meubles ferm√©s, ajoute une ligne pour le contenu estim√©

üéØ CONTRAINTES ABSOLUES :

‚ö†Ô∏è **INVENTAIRE GLOBAL UNIQUE** :
- Cr√©e UN SEUL inventaire fusionn√© pour TOUTE la pi√®ce
- Ne r√©p√®te JAMAIS le m√™me meuble s'il appara√Æt sur plusieurs photos
- Si un objet est partiellement visible sur plusieurs photos, COMBINE l'information pour cr√©er UNE SEULE entr√©e

‚ö†Ô∏è **FORMAT JSON STRICT** :
- Respecte EXACTEMENT le sch√©ma fourni dans le prompt utilisateur
- Tous les champs obligatoires doivent √™tre pr√©sents
- Utilise TOUJOURS les types de donn√©es corrects (number, boolean, string)

‚ö†Ô∏è **ESTIMATION SYST√âMATIQUE** :
- Estime TOUJOURS les volumes, m√™me si les mesures exactes ne sont pas visibles
- Utilise les proportions relatives et les r√©f√©rences standard (porte, meubles connus)
- Mieux vaut une estimation coh√©rente qu'aucune mesure

‚ö†Ô∏è **FUSION INTELLIGENTE** :
- M√™me objet sous 2 angles diff√©rents = 1 entr√©e, pas 2
- Objet partiellement cach√© sur photo 1 + visible sur photo 2 = combine les infos
- Utilise TOUTES les photos pour obtenir la meilleure vue de chaque objet

üìè TECHNIQUES DE MESURE :
- **R√âF√âRENCES VISUELLES** : Portes ~80cm de large, prises √©lectriques ~15cm du sol, carrelage standard ~30√ó30cm
- **PROPORTIONS** : Compare les objets entre eux pour d√©duire les dimensions
- **PERSPECTIVE** : Tiens compte de l'angle de vue et de la distorsion
- **CONFIDENCE** : 0.8-0.95 pour les mesures bien visibles, 0.5-0.7 pour les estimations approximatives

‚ö†Ô∏è **R√âF√âRENCE MOBILIER STANDARD** :
- Si l'objet est un meuble standardis√© (comme les LITS), privil√©gie les dimensions usuelles connues :
  ‚Ä¢ Lit simple : 90√ó190 cm
  ‚Ä¢ Lit double : 140√ó190 cm
  ‚Ä¢ Lit queen : 160√ó200 cm
  ‚Ä¢ Lit king : 180√ó200 cm
- N'invente pas de formats interm√©diaires (ex : 180√ó140 cm)
- Si l'image montre un objet proche d'un standard, arrondis vers le format connu le plus probable

üõèÔ∏è **R√àGLES SP√âCIALES POUR LES LITS ET LITERIE** :
1. **TOUJOURS cr√©er des entr√©es S√âPAR√âES** :
   - Entr√©e 1 : Structure du lit (cadre + sommier)
   - Entr√©e 2 : Matelas
   - Entr√©e 3+ : Textiles visibles (couette, oreillers, plaid, traversin, etc.)

2. **Si textiles NON distinguables clairement** :
   - Ajoute "textile_included": true au matelas
   - Ne cr√©e pas d'entr√©es s√©par√©es pour les textiles

3. **Exemple d'un lit complet bien visible** :
   [
     {"label":"lit double (structure)", "category":"furniture", "quantity":1, "dimensions_cm":{"length":140,"width":190,"height":40,"source":"estimated"}, "volume_m3":1.064, "textile_included":false, ...},
     {"label":"matelas double", "category":"furniture", "quantity":1, "dimensions_cm":{"length":140,"width":190,"height":20,"source":"estimated"}, "volume_m3":0.532, "textile_included":false, ...},
     {"label":"couette", "category":"misc", "quantity":1, "dimensions_cm":{"length":200,"width":200,"height":15,"source":"estimated"}, "volume_m3":0.6, "textile_included":false, ...},
     {"label":"oreiller", "category":"misc", "quantity":2, "dimensions_cm":{"length":60,"width":60,"height":15,"source":"estimated"}, "volume_m3":0.054, "textile_included":false, ...}
   ]

4. **Exemple d'un lit avec textiles non distinguables** :
   [
     {"label":"lit double (structure)", "category":"furniture", "quantity":1, "dimensions_cm":{"length":140,"width":190,"height":40,"source":"estimated"}, "volume_m3":1.064, "textile_included":false, ...},
     {"label":"matelas double", "category":"furniture", "quantity":1, "dimensions_cm":{"length":140,"width":190,"height":20,"source":"estimated"}, "volume_m3":0.532, "textile_included":true, "notes":"Inclut literie (couette, oreillers)", ...}
   ]

üóÑÔ∏è **R√àGLES POUR MEUBLES DE RANGEMENT FERM√âS** :
- **Armoires, commodes, buffets, biblioth√®ques ferm√©es** :
  1. Cr√©er l'entr√©e pour le meuble lui-m√™me
  2. **AJOUTER UNE LIGNE SUPPL√âMENTAIRE** pour le contenu √©ventuel :
     - Label : "{nom du meuble} (contenu √©ventuel)"
     - Category : "misc"
     - Volume : **50% du volume du meuble**
     - Notes : "Estimation contenu - √† ajuster selon r√©alit√©"

- **Exemple d'armoire ferm√©e** :
   [
     {"label":"armoire 3 portes", "category":"furniture", "quantity":1, "dimensions_cm":{"length":180,"width":60,"height":200,"source":"estimated"}, "volume_m3":2.16, "textile_included":false, ...},
     {"label":"armoire 3 portes (contenu √©ventuel)", "category":"misc", "quantity":1, "dimensions_cm":{"length":180,"width":60,"height":100,"source":"estimated"}, "volume_m3":1.08, "textile_included":false, "notes":"Estimation contenu 50% - √† ajuster selon r√©alit√©", ...}
   ]

- **Meubles ouverts ou vides visibles** : Ne PAS ajouter de ligne de contenu

üè∑Ô∏è CAT√âGORIES D'OBJETS :
- **furniture** : lits, canap√©s, tables, chaises, armoires, commodes, √©tag√®res, bureaux
- **appliance** : r√©frig√©rateur, lave-linge, TV, four, micro-ondes, lave-vaisselle
- **box** : cartons, coffres, malles, conteneurs
- **art** : tableaux, sculptures, cadres, miroirs d√©coratifs
- **misc** : vases, lampes, livres, bibelots, plantes, petits objets, textiles, contenu de meubles

üîß D√âMONTABILIT√â (analyse visuelle) :
- Regarde les vis, charni√®res, structure modulaire
- Tables et chaises : g√©n√©ralement d√©montables
- Armoires et lits : souvent d√©montables (pieds viss√©s)
- Canap√©s : rarement d√©montables (sauf modulaires)

‚ùå OBJETS √Ä IGNORER (non transportables) :
- √âl√©ments fixes : radiateurs, climatiseurs encastr√©s, chemin√©es, plomberie
- √âl√©ments de construction : murs, plafonds, sols, fen√™tres, portes

R√©ponds en JSON strict uniquement.`;

/**
 * Prompt utilisateur pour l'analyse par pi√®ce
 * Version "Best of Both" - Structure claire avec exemples concrets
 */
const ROOM_ANALYSIS_USER_PROMPT = `Analyse ces photos de la pi√®ce et cr√©e un inventaire complet.

üìä FORMAT DE R√âPONSE (JSON strict) :
{
 "items":[
   {
     "label":"string",                    // ex: "chaise", "table √† manger", "lit double (structure)", "armoire (contenu √©ventuel)"
     "category":"furniture|appliance|box|art|misc",
     "confidence":0.8,                    // 0-1, ta confiance dans l'identification
     "quantity":number,                   // ‚ö†Ô∏è REGROUPE les objets identiques !
     "dimensions_cm":{
       "length":number,                   // Longueur en cm
       "width":number,                    // Largeur en cm
       "height":number,                   // Hauteur en cm
       "source":"estimated"               // ou "visual" si mesures visibles
     },
     "volume_m3":number,                  // ‚ö†Ô∏è Utilise la FORMULE : (L √ó l √ó h) / 1_000_000
     "fragile":boolean,                   // Verre, c√©ramique, objets cassables
     "stackable":boolean,                 // Peut-on empiler d'autres objets dessus ?
     "textile_included":boolean,          // ‚ö†Ô∏è NOUVEAU : true si literie/textiles inclus mais non distinguables
     "notes":"string|null",               // Remarques importantes
     "dismountable":boolean,              // Peut-on le d√©monter pour le transport ?
     "dismountable_confidence":number     // 0-1, ta confiance dans la d√©montabilit√©
   }
 ],
 "totals":{
   "count_items":number,                  // Somme des quantities
   "volume_m3":number                     // Somme des volumes
 },
 "special_rules":{
   "autres_objets":{
     "present":boolean,                   // Y a-t-il des petits objets non list√©s ?
     "listed_items":["string"],           // Liste des types (ex: ["v√™tements", "jouets"])
     "volume_m3":number                   // Volume estim√© pour ces objets
   }
 }
}

üî¢ R√àGLES DE COMPTAGE INTELLIGENT :

‚ö†Ô∏è **COMPTE TOUS LES OBJETS VISIBLES - NE PAS SE LIMITER √Ä 1 !**

1. **OBJETS IDENTIQUES ‚Üí 1 entr√©e avec quantity > 1** :
   ‚úÖ 4 chaises identiques ‚Üí {"label":"chaise", "quantity":4}
   ‚úÖ 3 vases identiques ‚Üí {"label":"vase", "quantity":3}
   ‚úÖ 6 livres sur √©tag√®re ‚Üí {"label":"livre", "quantity":6}

2. **OBJETS DIFF√âRENTS ‚Üí Entr√©es S√âPAR√âES** :
   ‚úÖ 2 chaises rouges + 4 chaises blanches ‚Üí 2 entr√©es distinctes
   ‚úÖ Petite table + grande table ‚Üí 2 entr√©es

3. **COMPTAGE ESTIM√â POUR LOTS** :
   ‚úÖ Beaucoup d'objets similaires ‚Üí quantity estim√©e + note "environ X objets"

‚ùå **ERREURS √Ä √âVITER** :
   ‚ùå Voir 6 chaises mais mettre quantity: 1
   ‚ùå Cr√©er 6 entr√©es "chaise" au lieu d'1 avec quantity: 6
   ‚ùå Compter le m√™me lit visible sur 2 photos comme 2 lits

üì∏ **RAPPEL D√âDUPLICATION** :
M√™me objet sur plusieurs photos = 1 SEULE entr√©e dans le JSON !

D√©tecte TOUS les objets MOBILES avec leur QUANTIT√â EXACTE.`;

/**
 * Analyse toutes les photos d'une pi√®ce avec Claude
 */
export async function analyzeRoomPhotos(request: RoomAnalysisRequest): Promise<RoomAnalysisResult> {
  const startTime = Date.now();
  
  try {
    logger.debug(`üè† D√©but analyse pi√®ce "${request.roomType}" avec ${request.photos.length} photos`);
    
    if (request.photos.length === 0) {
      throw new Error('Aucune photo fournie pour l\'analyse');
    }

    // üéØ NOUVELLE LOGIQUE : Analyser chaque photo individuellement puis fusionner
    logger.debug(`üîç Analyse de ${request.photos.length} photos de la pi√®ce "${request.roomType}"`);
    
    const userPrompt = `Analyse cette photo de la pi√®ce "${request.roomType}" et cr√©e un inventaire complet.

` + ROOM_ANALYSIS_USER_PROMPT.split('\n').slice(1).join('\n');
    
    // ‚úÖ NOUVELLE APPROCHE : Envoyer TOUTES les photos √† Claude en UN SEUL appel
    // Cela √©vite la duplication car Claude analyse toutes les images ensemble
    logger.debug(`üì∏ Analyse de ${request.photos.length} photos en UN SEUL appel Claude`);
    
    const photoIds = request.photos.map(p => p.id);
    const imageUrls = request.photos.map(photo => {
      return photo.url.startsWith('http') 
        ? photo.url 
        : `http://localhost:3001${photo.url}`;
    });
    
    const { analyzeMultiplePhotosWithClaude } = await import("./claudeVision");
    
    const analysis = await analyzeMultiplePhotosWithClaude({
      photoIds: photoIds,
      imageUrls: imageUrls,
      systemPrompt: ROOM_ANALYSIS_SYSTEM_PROMPT,
      userPrompt: userPrompt
    });
    
    logger.debug(`‚úÖ Analyse multi-images termin√©e: ${analysis.items?.length || 0} objets d√©tect√©s`);

    // ‚úÖ Le post-traitement est d√©j√† fait dans analyzeMultiplePhotosWithClaude
    // Pas besoin de le refaire ici
    
    const processingTime = Date.now() - startTime;
    
    const result: RoomAnalysisResult = {
      ...analysis,
      roomType: request.roomType,
      photoCount: request.photos.length,
      analysisType: 'room-based-claude',
      photo_id: request.photos.map(p => p.id).join(',')
    };
    
    logger.debug(`‚úÖ Analyse pi√®ce "${request.roomType}" termin√©e: ${result.items.length} objets, ${processingTime}ms`);
    
    return result;
    
  } catch (error) {
    console.error(`‚ùå Erreur analyse pi√®ce "${request.roomType}":`, error);
    
    // Retourner un r√©sultat d'erreur
    return {
      version: "1.0.0" as const,
      items: [],
      special_rules: { autres_objets: { present: false, volume_m3: 0, listed_items: [] } },
      warnings: [`Erreur analyse pi√®ce: ${error instanceof Error ? error.message : 'Erreur inconnue'}`],
      errors: [],
      totals: { count_items: 0, volume_m3: 0 },
      roomType: request.roomType,
      photoCount: request.photos.length,
      analysisType: 'room-based-claude',
      photo_id: request.photos[0]?.id || 'unknown'
    };
  }
}

/**
 * Analyse une photo avec Claude (version simplifi√©e)
 */
async function analyzePhotoWithClaude(opts: {
  photoId: string;
  imageUrl: string;
  systemPrompt: string;
  userPrompt: string;
}): Promise<TPhotoAnalysis> {
  const isClaudeApiKeyConfigured = !!config.claude.apiKey;

  if (!isClaudeApiKeyConfigured) {
    console.warn('Aucune cl√© Claude configur√©e - using mock mode');
    return {
      version: "1.0.0" as const,
      items: [{ 
        label: "Table", 
        category: "furniture" as const,
        quantity: 1, 
        dimensions_cm: { length: 120, width: 80, height: 75, source: "estimated" as const }, 
        volume_m3: 0.72, 
        confidence: 0.8, 
        fragile: false,
        stackable: false,
        notes: "Mode mock - cl√© Claude non configur√©e" 
      }],
      special_rules: { autres_objets: { present: false, volume_m3: 0, listed_items: [] } },
      warnings: ["Mode mock - cl√© Claude non configur√©e"],
      errors: [],
      totals: { count_items: 1, volume_m3: 0.72 },
      photo_id: opts.photoId,
    };
  }

  try {
    // Construire l'URL compl√®te si c'est une URL relative
    const fullImageUrl = opts.imageUrl.startsWith('http') 
      ? opts.imageUrl 
      : `http://localhost:3001${opts.imageUrl}`;
    
    logger.debug(`üñºÔ∏è Chargement image depuis: ${fullImageUrl}`);
    
    // Charger l'image depuis l'URL
    const imageResponse = await fetch(fullImageUrl);
    if (!imageResponse.ok) {
      throw new Error(`Erreur chargement image: ${imageResponse.status}`);
    }
    
    const imageBuffer = await imageResponse.arrayBuffer();
    
    // Pour le test, utiliser directement l'image sans optimisation
    const base64Image = Buffer.from(imageBuffer).toString('base64');
    
    logger.debug(`Image Claude pr√©par√©e: ${base64Image.length} bytes`);

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': config.claude.apiKey!,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-haiku-20241022',
        max_tokens: 4000,
        temperature: 0.1,
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: `${opts.systemPrompt}\n\n${opts.userPrompt}`
              },
              {
                type: 'image',
                source: {
                  type: 'base64',
                  media_type: 'image/jpeg',
                  data: base64Image
                }
              }
            ]
          }
        ]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erreur Claude API: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    logger.debug('R√©ponse Claude re√ßue:', data);

    // Parser la r√©ponse Claude
    const content = data.content[0]?.text;
    if (!content) {
      throw new Error('Aucune r√©ponse de Claude');
    }

    // Parser le JSON de la r√©ponse
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Format de r√©ponse Claude invalide');
    }

    const analysis = JSON.parse(jsonMatch[0]);
    
    // Traitement post-IA : forcer le calcul du volume
    const processedItems = analysis.items.map((item: any) => {
      // Calculer le volume si pas fourni
      if (!item.volume_m3 && item.dimensions_cm) {
        item.volume_m3 = volumeFromDims(item.dimensions_cm);
      }
      
      return item;
    });
  
  return {
      version: "1.0.0" as const,
      items: processedItems,
      special_rules: analysis.special_rules || { autres_objets: { present: false, volume_m3: 0, listed_items: [] } },
    warnings: [],
    errors: [],
      totals: analysis.totals || { count_items: processedItems.length, volume_m3: processedItems.reduce((sum: number, item: any) => sum + (item.volume_m3 || 0), 0) },
      photo_id: opts.photoId,
    };

  } catch (error) {
    console.error('Erreur analyse Claude:', error);
    
    return {
      version: "1.0.0" as const,
      items: [],
      special_rules: { autres_objets: { present: false, volume_m3: 0, listed_items: [] } },
      warnings: [],
      errors: [`Erreur analyse: ${error instanceof Error ? error.message : 'Erreur inconnue'}`],
      totals: { count_items: 0, volume_m3: 0 },
      photo_id: opts.photoId,
    };
  }
}